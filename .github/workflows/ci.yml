name: CI
on:
  push: {}
  #push:
  #  branches:
  #    - master
  pull_request: {}

jobs:
  linux:
    name: ubuntu
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        #os: [ macos-latest, ubuntu-latest, windows-latest ]
        go: [ 1.13.15, 1.14.7, 1.15.5 ]
        firefox: [ "82.0", "83.0" ]
    runs-on: ${{ matrix.os }}
    env:
      FIREFOX_VERSION: ${{ matrix.firefox }}
      MOZ_HEADLESS: 1
      DISPLAY: ":99.0"
    steps:
    - name: Set up golang
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go }}

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Download and install Firefox
      run: |
        export FIREFOX_SOURCE_URL="https://download.mozilla.org/?product=firefox-$FIREFOX_VERSION&lang=en-US&os=linux64"
        wget -O /tmp/firefox.tar.bz2 $FIREFOX_SOURCE_URL
        mkdir -p $HOME/firefox
        tar -jvxf /tmp/firefox.tar.bz2 -C $HOME/

    - name: Startup Firefox in Headless mode
      run: |
        $HOME/firefox/firefox --version
        $HOME/firefox/firefox -marionette > /dev/null 2>&1 &
        sleep 10

    - name: Confirm Marionette TCP port is open (ubuntu-latest)
      run: netstat -ptln

    - name: Run Tests
      run: go test -test.v -race -coverprofile=coverage.txt -covermode=atomic

    - name: Convert coverage to lcov
      uses: jandelgado/gcov2lcov-action@v1.0.5
      with:
        infile: coverage.txt
        outfile: coverage.lcov

    - name: Coveralls
      uses: coverallsapp/github-action@v1.1.2
      with:
        github-token: ${{ secrets.github_token }}
        path-to-lcov: coverage.lcov
        flag-name: run-${{ matrix.os }}-FF-${{ matrix.firefox }}
        parallel: true

  code-coverage:
    needs: linux
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true

#  coverage:
#    name: coverage
#    strategy:
#      fail-fast: false
#      matrix:
#        firefox: [ "83.0" ]
#    runs-on: ubuntu-latest
#    env:
#      FIREFOX_VERSION: ${{ matrix.firefox }}
#      MOZ_HEADLESS: 1
#      DISPLAY: ":99.0"
#    steps:
#    - name: Install Go
#      if: success()
#      uses: actions/setup-go@v2
#      with:
#        go-version: 1.15.x
#
#    - name: Checkout code
#      uses: actions/checkout@v2
#
#    - name: Code coverage
#      run: |
#        export FIREFOX_SOURCE_URL="https://download.mozilla.org/?product=firefox-$FIREFOX_VERSION&lang=en-US&os=linux64"
#        wget -O /tmp/firefox.tar.bz2 $FIREFOX_SOURCE_URL
#        mkdir -p $HOME/firefox
#        tar -jvxf /tmp/firefox.tar.bz2 -C $HOME/
#        $HOME/firefox/firefox --version
#        $HOME/firefox/firefox -marionette > /dev/null 2>&1 &
#        sleep 10
#        pwd
#        ls -sl
#        go test -test.v -race -coverprofile=coverage.txt -covermode=atomic
#        ls -sl
#
#    - name: Convert coverage to lcov
#      uses: jandelgado/gcov2lcov-action@v1.0.5
#      with:
#          infile: coverage.txt
#          outfile: coverage.lcov
#
#    - name: Coveralls
#      uses: coverallsapp/github-action@v1.0.1
#      with:
#          github-token: ${{ secrets.github_token }}
#          path-to-lcov: coverage.lcov

  windows:
    name: windows
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        go: [ 1.13.x, 1.14.x, 1.15.x ]
        firefox: [ "83.0" ] # FIXME: /InstallDir not unpacking to supplied folder on version 82
    runs-on: ${{ matrix.os }}
    env:
      FIREFOX_VERSION: ${{ matrix.firefox }}
      MOZ_HEADLESS: 1
      MOZ_MARIONETTE: 1
      DISPLAY: ":99.0"
    steps:
      - name: Set up golang
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Go Version
        run: go version

      - name: Install Firefox
        run: choco install Firefox --version=${{ matrix.firefox }} --params "/NoTaskbarShortcut /NoDesktopShortcut /NoAutoUpdate /InstallDir:d:\ff"

      - name: Test Firefox
        run: |
          netsh advfirewall set allprofiles state off
          dir d:\ff
          d:\ff\firefox.exe -Marionette
          tasklist
          netstat -aon -p TCP
          go test -v -covermode=atomic

  osx:
    name: mac-os
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest ]
        go: [ 1.13.x, 1.14.x, 1.15.x ]
        firefox: [ "82.0", "83.0" ]
    runs-on: ${{ matrix.os }}
    env:
      FIREFOX_VERSION: ${{ matrix.firefox }}
      MOZ_HEADLESS: 1
      MOZ_MARIONETTE: 1
      DISPLAY: ":99.0"
    steps:
      - name: Set up golang
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Install Firefox
        run: |
          export FIREFOX_SOURCE_URL="https://download.mozilla.org/?product=firefox-$FIREFOX_VERSION&lang=en-US&os=osx"
          wget -O /tmp/firefox.dmg $FIREFOX_SOURCE_URL
          mkdir -p $HOME/firefox
          hdiutil attach /tmp/firefox.dmg | grep Volumes
          ls -sl /Volumes/Firefox/*
          cp -R /Volumes/Firefox/Firefox.app $HOME/firefox/Firefox.app

      - name: Startup Firefox in Headless mode
        run: |
          $HOME/firefox/Firefox.app/Contents/MacOS/firefox --version
          ls -sl $HOME/firefox/Firefox.app/Contents/MacOS/*
          $HOME/firefox/Firefox.app/Contents/MacOS/firefox-bin -marionette > /dev/null 2>&1 &
          sleep 5
          netstat -p tcp -van | grep LISTEN
          go test -test.v -race -covermode=atomic
